openapi: "3.0.3"
info:
  title: QuasarX API
  description: QuasarX Rest API接口
  version: "0.0.1"
servers:
  - url: http://localhost:19107/v0
paths:
  /stocks/simple:
    get:
      summary: stock's symbol and name
      description: 获取所有股票的代码和名称
      tags: 
        - Stocks
      responses:
        '200':
          description: An array of stocks
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StockList"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /stocks/detail:
    get:
      summary: stock detail info
      description: 当前时刻股票的信息
      tags:
        - Stocks
      parameters:
      - in: query
        name: id
        schema:
          type: integer
        description: 要获取的合约代码
      responses:
        '200':
          description: An array of stocks
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StockDetail"
  /stocks/history:
    get:
      summary: get stock history
      description: 获取指数信息
      tags:
        - Stocks
      parameters:
        - in: query
          name: id
          schema:
            type: string
          description: 要获取的代码
          example: 000001
        - in: query
          name: type
          schema:
            type: string
          description: 数据频率
          example: 1d
        - in: query
          name: start
          schema:
            type: integer
          description: 起始时间
        - in: query
          name: end
          schema:
            type: integer
          description: 结束时间
        - in: query
          name: right
          schema:
            type: integer
          description: 复权方式,1-后复权
      responses:
        '200':
          description: An array of stocks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Quote"
  /stocks/sector/flow:
    get:
      summary: get flow info
      description: 获取板块资金流信息
      tags:
        - Sector
      parameters:
        - in: query
          name: type
          schema:
            type: integer
            description: 1- 所有历史 0- 当日信息
      responses:
        '200':
          description: An array of sectors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SectorItem"
  /index/quote:
    get:
      summary: get index info
      description: 获取指数信息
      tags: 
        - Index
      parameters:
        - in: query
          name: id
          schema:
            type: string
          description: 要获取的指数代码,多个时用逗号分开
      responses:
        '200':
          description: An array of stocks
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IndexQuote"
  /simulate:
    post:
      summary: simulate a exchange
      description: 交易所仿真
      tags: 
        - Simulate
      requestBody:
        description: 交易所信息
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SimulateRequest"
      responses:
        '200':
          description: success or not
  /risk/stoploss:
    post:
      summary: stoploss
      description: 止损设置
      tags: 
        - Risk
      requestBody:
        description: 止损参数
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StopLossRequest"
      responses:
        '200':
          description: success or not
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StopLossResponse"
    delete:
      summary: stoploss
      description: 删除设置的止损
      tags: 
        - Risk
      parameters:
        - in: query
          name: id
          schema:
            type: integer
          description: 要删除的id
      responses:
        '200':
          description: success
    get:
      summary: stoploss
      description: 获取所有设置的止损
      tags: 
        - Risk
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/StopLossList"
  /risk/var:
    post:
      summary: run strategy for VaR
      description: 计算策略的VaR
      tags:
        - Risk
      requestBody:
        description: 计算VaR的参数
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VaRRequest"
      responses:
        '200':
          description: success or not
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VaRResponse"
    get:
      summary: get strategy of history VaR
      description: 获取历史计算出的策略的VaR
      tags:
        - Risk
      parameters:
        - in: query
          name: id
          schema:
            type: integer
            description: 佣金id
      responses:
        '200':
          description: success or not
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/VaRHistoryItem"
  /risk/drawdown:
    get:
      summary: drawdown
      description: 获取给定时间范围内的最大回撤
      tags:
        - Risk
      parameters:
        - in: query
          name: range
          schema:
            type: integer
            enum: [0, 1]
            description: 0-近90天,1-指定时间开始
            example: 0
        - in: query
          name: symbol
          schema:
            type: string
            description: 多个合约或者指定的持仓
            example: ap2501C2508,ap2502C2509
        - in: query
          name: datetime
          schema:
            type: integer
            description: 可选, 当type=1时指定的时间,单位s
            example: 1739174267836
      responses:
        '200':
          description: success or not
          content:
            application/json:
              schema:
                type: array
                items:
                  type: number
  /risk/factor/liquidity:
    get:
      summary: liquidity
      description: 获取给定时间范围内的流动性风险因子
      tags:
        - Risk
      parameters:
        - in: query
          name: symbol
          schema:
            type: string
            description: 多个合约或者指定的持仓
            example: ap2501C2508,ap2502C2509
        - in: query
          name: datetime
          schema:
            type: integer
            description: 可选, 当type=1时指定的时间,单位s
            example: 1739174267836
      responses:
        '200':
          description: success or not
          content:
            application/json:
              schema:
                type: array
                items:
                  type: number
  /portfolio:
    put:
      summary: portfolio
      description: 创建一个投资组合PH
      tags: 
        - Portfolio
      requestBody:
        description: 投资组合参数
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PortfolioRequest"
      responses:
        '200':
          description: success or not
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PortfolioResponse"
  /commission:
    put:
      summary: commission
      description: 创建一个佣金
      tags: 
        - Commission
      requestBody:
        description: 佣金参数
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommissionRequest"
      responses:
        '200':
          description: success or not
          content:
            application/json:
              schema:
                type: integer
                description: 设置成功后返回的id
                example: 121
    get:
      summary: commission
      description: 获取创建的佣金
      tags: 
        - Commission
      parameters:
        - in: query
          name: id
          schema:
            type: integer
            description: 佣金id
            example: 12
      responses:
        '200':
          description: success or not
          content:
            application/json:
              schema:
                type: array
                description: 返回的佣金信息
                items:
                  $ref: "#/components/schemas/CommissionItem"
    delete:
      summary: commission
      description: 删除佣金
      tags: 
        - Commission
      parameters:
        - in: query
          name: id
          schema:
            type: integer
          description: 要删除的佣金id
      responses:
        '200':
          description: success or not
  /strategy/metric:
    get:
      summary: metric
      description: 获取策略的评价指标
      tags: 
        - Strategy
      parameters:
        - in: query
          name: id
          schema:
            type: integer
          description: 要获取的策略id, 0-表示一直持有的策略
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StrategyMetrics"
  /strategy:
    get:
      summary: get all strategy name
      description: 获取策略的名字
      tags: 
        - Strategy
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  description: 策略的名字
                  example: random
    post:
      summary: run a strategy
      description: 部署指定的某个策略
      tags: 
        - Strategy
      requestBody:
        description: 参数
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StrategyRequest"
      responses:
        '200':
          description: success
  /backtest:
    post:
      summary: test one strategy
      description: 对某个策略做回测
      tags: 
        - Backtest
      requestBody:
        description: 参数
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BacktestRequest"
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BacktestResponse"
        '404':
          description: fail
  /predict/montecarlo:
    post:
      summary: predict price of asset
      description: use monte carlo predict price
      tags: 
        - Predict
      requestBody:
        description: 参数
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MonteCarloRequest"
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MonteCarloResponse"
  /predict/finity:
    post:
      summary: predict price of asset
      description: use finity difference method to predict
      tags: 
        - Predict
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  symbols:
                    type: string
                    example: 111000,000001
  /predict/operation:
    put:
      summary: set prediction
      description: 设置预测的操作,即接下来某个时间内应该执行的操作
      tags: 
        - Predict
      requestBody:
        description: 预测参数
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PredictionOperationRequest"
      responses:
        '200':
          description: success
    get:
      summary: get prediction
      description: 获取预设置的操作
      tags: 
        - Predict
      parameters:
        - in: query
          name: symbol
          schema:
            type: string
          description: symbol
        - in: query
          name: exchange
          schema:
            type: string
          description: exchange
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PredictionItem"
    delete:
      summary: delete prediction
      description: 删除预设置的操作
      tags: 
        - Predict
      parameters:
        - in: query
          name: symbol
          schema:
            type: string
            description: symbol
        - in: query
          name: index
          schema:
            type: integer
            description: index of query prediction
        - in: query
          name: exchange
          schema:
            type: integer
            description: 0-simulate, 1-xtp, 2-ctp
      responses:
        '200':
          description: success
  /future/simple:
    get:
      summary: all future info
      description: get future name and symbol
      tags: 
        - Future
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FutureItem"
  /feature:
    get:
      summary: features
      description: get features of symbol
      tags: 
        - Feature
      parameters:
        - in: query
          name: symbol
          schema:
            type: string
          description: symbol
        - in: query
          name: start
          schema:
            type: integer
          description: start time
        - in: query
          name: end
          schema:
            type: integer
          description: end time
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: number
  /data/sync:
    get:
      summary: sync data
      description: 同步服务保存的数据，同步完成后清空当前服务保存的数据
      tags: 
        - Data
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Quote"
  /user/login:
    post:
      summary: login
      description: 登录服务
      tags: 
        - User
      requestBody:
        description: 参数
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
  /user/status:
    get:
      summary: cpu/memory info
      description: 获取服务器状态信息
      tags: 
        - User
      responses:
        '200':
          description: success
  /user/logout:
    post:
      summary: logout
      description: 登出服务
      tags: 
        - User
      requestBody:
        description: 参数
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LogoutRequest"
      responses:
        '200':
          description: success
  /user/funds:
    get:
      summary: 用户当前的可用资金
      description: 用户当前的可用资金
      tags:
        - User
      responses:
        '200':
          description: 返回用户当前的可用资金
          content:
            application/json:
              schema:
                type: object
                properties:
                  funds:
                    type: number
                    description: 用户当前的可用资金
  /trade/order:
    post:
      summary: trade
      description: 下单
      tags: 
        - Trade
      requestBody:
        description: 参数
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TradeOrderRequest"
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TradeOrderResponse"
        '401':
          description: 频繁交易限制,失败
    get:
      summary: trade
      description: 获取下单状态信息
      tags:
        - Trade
      parameters:
      - in: query
        name: id
        schema:
          type: integer
        description: 要获取的订单ID,如果请求不包含id则获取所有订单状态
      responses:
        '200':
          description: An array of stocks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TradeOrderItem"
    delete:
      summary: stock trade
      description: 股票撤单
      tags: 
        - Trade
      parameters:
        - in: query
          name: id
          schema:
            type: integer
          description: 单号
      responses:
        '200':
          description: success
  /server/event:
    get:
      summary: waiting for server event
      description: 长链接，侦听服务器返回的消息，包括订单成交撤销等事件
      tags:
        - Server
  /position:
    get:
      summary: get position
      description: 获取持仓信息:1.无任何参数时,获取当前所有持仓 2.获取某只标的的所有持仓细节
      tags:
        - Position
      parameters:
          - in: query
            name: id
            schema:
              type: string
            description: 要获取的代码
            example: 000001
      responses:
        '200':
          description: An array of positions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PositionItem"
components:
  schemas:
    # 基础数据类型
    StockItem:
      type: object
      properties:
        symbol:
          type: string
          example: '000002'
        name:
          type: string
          example: '中国银行'
    
    FutureItem:
      type: object
      properties:
        symbol:
          type: string
          example: cffex2503
        name:
          type: string
        exchange:
          type: string
          example: xxx
    
    # 响应数据结构
    StockList:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 0
        status:
          type: string
          description: Order Status
          example: success
          enum:
            - fail
            - success
        stocks:
          type: array
          description: stock list
          items:
            $ref: "#/components/schemas/StockItem"
    
    StockDetail:
      type: object
      properties:
        price:
          type: number
          description: 价格
          example: 12.2
        volume:
          type: integer
          description: 交易量
          example: 168
    
    IndexQuote:
      type: object
      properties:
        price:
          type: number
          description: 价格
        change:
          type: number
          description: 涨跌幅
    
    Quote:
      type: object
      properties:
        datetime:
          type: string
          description: 时间
          example: 2024/03/12 00:01:22
        open:
          type: number
          description: 开盘价
          example: 12.2
        close:
          type: number
          description: 收盘价
          example: 12.2
        high:
          type: number
          description: 最高价
          example: 12.2
        low:
          type: number
          description: 最低价
          example: 12.2
        volume:
          type: number
          description: 交易额
          example: 12.2
        turnover:
          type: number
          description: 换手率
          example: 12.2
    
    SectorItem:
      type: object
      properties:
        name:
          type: string
          description: 板块名
        value:
          type: array
          items:
            $ref: "#/components/schemas/SectorFlowItem"
    
    SectorFlowItem:
      type: object
      properties:
        date:
          type: string
          description: 日期
        main:
          type: number
          description: 主力净流入
        supbig:
          type: number
          description: 超大单净流入
        big:
          type: number
          description: 大单净流入
        mid:
          type: number
          description: 中单净流入
        small:
          type: number
          description: 小单净流入
    
    OperatorItem:
      type: object
      description: 买卖的信息
      properties:
        symb:
          type: string
          description: 合约
        dt:
          type: integer
          description: 时间
        p:
          type: number
          description: 价格
        q:
          type: integer
          description: 数量
    
    StopLossTarget:
      type: object
      properties:
        price:
          type: number
          description: 止损提示的初始价格
          example: 48.41
        symbol:
          type: string
          description: 代码
          example: '001136'
        type:
          type: string
          description: 代码类型
          example: 'AStock'
        percent:
          type: number
          description: 止损百分比
          example: 0.05
    
    StopLossRequest:
      type: object
      properties:
        type:
          type: integer
          description: 止损类型 (0-7)
          example: 0
        email:
          type: string
          description: 止损提示的email地址
          example: webbery@wo.cn
        target:
          type: array
          description: 标的信息
          items:
            $ref: "#/components/schemas/StopLossTarget"
    
    StopLossResponse:
      type: object
      properties:
        id:
          type: integer
          description: 设置成功后返回的id
          example: 12
    
    StopLossList:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 33
        type:
          type: string
          description: 止损类型
          example: 'percentage'
        portfolio:
          type: array
          description: 代码
          items:
            $ref: "#/components/schemas/StopLossTarget"
    
    VaRRequest:
      type: object
      properties:
        start:
          type: string
          description: 回测开始时间
          example: "2010-01-01 00:00:00"
        end:
          type: string
          description: 回测结束时间
          example: "2030-01-01 00:00:00"
        portfolio:
          $ref: "#/components/schemas/PortfolioConfig"
        confidence:
          type: number
          description: 置信度
          example: 0.99
        days:
          type: integer
          description: 预测未来N天
          example: 10
        capital:
          type: number
          description: 总本金
          example: 10000
        commission:
          $ref: "#/components/schemas/CommissionConfig"
    
    PortfolioConfig:
      type: object
      description: 投资组合
      properties:
        strategy:
          type: string
          description: 策略名
          example: 'random'
        pool:
          type: array
          description: 代码池
          items:
            type: string
            description: 代码
            example: '000001'
        data_type:
          type: string
          description: 数据级别, day/5min/1min
          example: 'day'
    
    CommissionConfig:
      type: object
      description: 设置的佣金
      properties:
        type:
          type: string
          description: 佣金类型
          example: 'A股'
        slip:
          type: number
          description: 滑点
          example: 0.005
        min_price:
          type: number
          description: 最低交易费用
          example: 5
        trade_price:
          type: number
          description: 佣金比例
          example: 0.0001345
        tax:
          type: number
          description: 印花税, 0.1%
          example: 0.01
    
    VaRResponse:
      type: object
      properties:
        id:
          type: integer
          description: var的id
          example: 1
        var:
          type: number
          description: 损失
          example: 100000.0
        es:
          type: number
          description: 尾部损失
          example: 100000.0
        sharp:
          type: number
          description: 夏普率
          example: 1.2
        ops:
          type: array
          description: 买卖单信息
          items:
            $ref: "#/components/schemas/TradeOperation"
        profit:
          type: array
          description: 收益
          items:
            $ref: "#/components/schemas/ProfitItem"
    
    TradeOperation:
      type: object
      properties:
        symbol:
          type: string
          description: 代码
        datetime:
          type: integer
          description: 时间
        price:
          type: number
          description: 价格
        count:
          type: number
          description: 买卖数量
        long:
          type: boolean
          description: 买或卖
    
    ProfitItem:
      type: object
      properties:
        datetime:
          type: integer
          description: 时间
        value:
          type: number
          description: 收益
    
    VaRHistoryItem:
      type: object
      properties:
        id:
          type: integer
          description: var的id
          example: 1
    
    PortfolioRequest:
      type: object
      properties:
        total:
          type: number
          description: 总资产
          example: 100000
        pool:
          type: array
          description: 池子
          items:
            type: string
            description: 代码
            example: "000001"
    
    PortfolioResponse:
      type: object
      properties:
        id:
          type: integer
          description: 设置成功后返回的id
          example: 121
    
    CommissionRequest:
      type: object
      properties:
        name:
          type: string
          description: 给设置取的名称
        min:
          type: number
          description: 单比交易最低佣金
        value:
          type: number
          description: 单比交易佣金比例
        tax:
          type: number
          description: 卖出税费
        type:
          type: string
          description: 计算类型
    
    CommissionItem:
      type: object
      properties:
        id:
          type: integer
          description: 佣金的id
          example: 12
        name:
          type: string
          description: 给设置取的名称
        min:
          type: number
          description: 单比交易最低佣金
        value:
          type: number
          description: 单比交易佣金比例
        tax:
          type: number
          description: 卖出税费
        type:
          type: string
          description: 计算类型
    
    StrategyMetrics:
      type: object
      properties:
        annual:
          type: number
          description: 年化收益率
          example: 0
        backward:
          type: number
          description: 最大回测
          example: 0
        wintimes:
          type: integer
          description: 盈利次数
          example: 0
        failtimes:
          type: integer
          description: 亏损次数
          example: 0
        winrate:
          type: number
          description: 胜率
          example: 0
        plrate:
          type: number
          description: 盈亏比
          example: 0
        sharp:
          type: number
          description: 夏普比率
          example: 0
        starttime:
          type: string
          description: 策略开始运行的时间
          example: '2010/01/01 00:00:00'
        endtime:
          type: string
          description: 策略停止的时间
          example: '2020/01/01 00:00:00'
    
    StrategyRequest:
      type: object
      properties:
        name:
          type: string
          description: 策略名称
          example: 'xgboost'
        mode:
          type: integer
          description: 模式, 0-训练模式, 1-(部署)实盘模式, 2-模拟盘模式
          example: 0
        params:
          type: object
          description: 训练模式下的参数
          example: {}
    
    BacktestRequest:
      type: object
      properties:
        script:
          type: string
          description: 策略,json格式描述的图
          example: '{}'
        tick:
          type: string
          description: 时间频率,1d-天,1h-小时,5m-5分钟,1m-1分钟,30s-30秒,15s-15秒,5s-5秒
          example: 1d
        static:
          type: array
          description: 统计信息
          items:
            $ref: "#/components/schemas/StatisticItem"
    
    StatisticItem:
      type: object
      description: 待统计的特征或者指标
      properties:
        name:
          type: string
          description: 指标名
          example: MACD
        params:
          type: object
          description: 指标参数
    
    BacktestResponse:
      type: object
      properties:
        buy:
          type: array
          items:
            $ref: "#/components/schemas/OperatorItem"
        sell:
          type: array
          items:
            $ref: "#/components/schemas/OperatorItem"
        features:
          type: object
          description: 收集的特征信息,包括每只合约的特征,以及总的统计特征
    
    MonteCarloRequest:
      type: object
      properties:
        times:
          type: integer
          description: 参数
          example: 10000
        symbol:
          type: string
          example: '513750'
        type:
          type: integer
          description: 5min 1/day 2
          example: 2
        start:
          type: integer
          example: 1711603292
        N:
          type: integer
          example: 10
        dt:
          type: integer
          description: 时间间隔(单位秒)
          example: 86400
        reply:
          type: integer
          description: 返回模拟的路径数
          example: 30
    
    MonteCarloResponse:
      type: object
      properties:
        id:
          type: integer
          description: simulation id 
        paths:
          type: array
          items:
            type: array
            description: a simulate path
            items:
              type: number
        expected:
          type: number
          description: expection of all path 
    
    PredictionOperationRequest:
      type: object
      properties:
        symbol:
          type: string
          description: symbol
          example: 000001
        datetime:
          type: string
          description: YYYY-MM-DD
        operation:
          type: integer
          description: 0-keep, 1-buy, 2-sell
        exchange:
          type: integer
          description: 0-simulate, 1-xtp, 2-ctp
    
    PredictionItem:
      type: object
      properties:
        symbol:
          type: string
          description: symbol
          example: 000001
        predictions:
          type: array
          description: operations
          items:
            $ref: "#/components/schemas/PredictionDetail"
    
    PredictionDetail:
      type: object
      properties:
        datetime:
          type: string
          description: time
        operator:
          type: integer
    
    SimulateRequest:
      type: object
      properties:
        type:
          type: string
          description: 交易所类型
          example: stock
        enable:
          type: boolean
          description: 开启或关闭
          example: true
    
    LoginRequest:
      type: object
      properties:
        name:
          type: string
          example: 'test'
        pwd:
          type: string
          example: 'test'
    
    LoginResponse:
      type: object
      properties:
        session:
          type: string
    
    LogoutRequest:
      type: object
      properties:
        name:
          type: string
        token:
          type: string
    
    TradeOrderRequest:
      type: object
      properties:
        kind:
          type: integer
          description: 交易种类 0-股票 1-期权 2-期货
          enum: [0, 1, 2]
        symbol:
          type: string
          description: 代码
        prices:
          type: array
          items:
            type: number
        quantity:
          type: integer
          description: 数量
        type:
          type: integer
          description: 0-市价单 1-限价单 2-条件单
          enum: [0, 1, 2]
        direct:
          type: integer
          description: 方向,0-买入 1-卖出 2-行权 3-融资买入 4-融券卖出
    
    TradeOrderResponse:
      type: object
      properties:
        id:
          type: integer
          description: 下单号
        status:
          type: integer
          description: 下单状态
    
    TradeOrderItem:
      type: object
      properties:
        id:
          type: integer
          description: 订单ID
        symbol:
          type: string
          description: 代码
        kind:
          type: integer
          description: 交易种类 0-股票 1-期权 2-期货
          enum: [0, 1, 2]
        type:
          type: integer
          description: 订单类型 0-市价单 1-限价单 2-条件单
          enum: [0, 1, 2]
        prices:
          type: array
          items:
            type: number
        quantity:
          type: integer
          description: 数量
        direct:
          type: integer
          description: 方向,0-买入 1-卖出 2-行权 3-融资买入 4-融券卖出
        status:
          type: integer
          description: 状态, 1-下单成功 2-下单失败 3-部分成交 4-完全成交 5-交易失败 6-撤单部分成功 7-撤单成功 8-撤单失败 9-部分成交部分撤单
    
    CancelOrderRequest:
      type: object
      properties:
        id:
          type: integer
          description: 下单号
    
    PositionItem:
      type: object
      properties:
        id:
          type: string
          description: 代码
          example: 000001
        name:
          type: string
          description: 名称
        datetime:
          type: integer
          description: 买入/卖出/行权时间
        operation:
          type: integer
          description: 0-买入/1-卖出/2-行权
        price:
          type: number
          description: 价格
        quantity:
          type: integer
          description: 数量
    
    Error:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 100000
        msg:
          type: string
          example: error